// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Ranksterr.Infrastructure;

#nullable disable

namespace Ranksterr.Infrastructure.Migrations.App
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240629054836_InitialwList")]
    partial class InitialwList
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ranksterr.Domain.ListableItems.ItemList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ItemLists");
                });

            modelBuilder.Entity("Ranksterr.Domain.ListableItems.ListItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ListItem");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ListItem");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Ranksterr.Domain.ListableItems.ListItemAssignment", b =>
                {
                    b.Property<Guid>("ListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ListItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ListItemId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ListId", "ListItemId");

                    b.HasIndex("ListItemId");

                    b.HasIndex("ListItemId1");

                    b.ToTable("ListItemAssignments");
                });

            modelBuilder.Entity("Ranksterr.Infrastructure.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Error")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OccurredOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("outbox_messages", (string)null);
                });

            modelBuilder.Entity("Ranksterr.Domain.ListableItems.TvShowItem", b =>
                {
                    b.HasBaseType("Ranksterr.Domain.ListableItems.ListItem");

                    b.Property<string>("ImdbId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TmdbId")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("TvShowItem");
                });

            modelBuilder.Entity("Ranksterr.Domain.Listables.MovieItem", b =>
                {
                    b.HasBaseType("Ranksterr.Domain.ListableItems.ListItem");

                    b.Property<string>("ImdbId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TmdbId")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("ListItem", t =>
                        {
                            t.Property("ImdbId")
                                .HasColumnName("MovieItem_ImdbId");

                            t.Property("ReleaseDate")
                                .HasColumnName("MovieItem_ReleaseDate");

                            t.Property("Thumbnail")
                                .HasColumnName("MovieItem_Thumbnail");

                            t.Property("TmdbId")
                                .HasColumnName("MovieItem_TmdbId");
                        });

                    b.HasDiscriminator().HasValue("MovieItem");
                });

            modelBuilder.Entity("Ranksterr.Domain.ListableItems.ListItemAssignment", b =>
                {
                    b.HasOne("Ranksterr.Domain.ListableItems.ItemList", "ItemList")
                        .WithMany("ListItemAssignments")
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ranksterr.Domain.ListableItems.ListItem", "ListItem")
                        .WithMany()
                        .HasForeignKey("ListItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ranksterr.Domain.ListableItems.ListItem", null)
                        .WithMany("ListItemAssignments")
                        .HasForeignKey("ListItemId1");

                    b.Navigation("ItemList");

                    b.Navigation("ListItem");
                });

            modelBuilder.Entity("Ranksterr.Domain.ListableItems.ItemList", b =>
                {
                    b.Navigation("ListItemAssignments");
                });

            modelBuilder.Entity("Ranksterr.Domain.ListableItems.ListItem", b =>
                {
                    b.Navigation("ListItemAssignments");
                });
#pragma warning restore 612, 618
        }
    }
}
